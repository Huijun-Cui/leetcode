class Solution {
public:
    int GetUglyNumber_Solution(int index) {
        int *pUglyNumbers = new int[index];
        pUglyNumbers[0] = 1;
        int nextIndex = 1;
        int *p2 = pUglyNumbers;
        int *p3 = pUglyNumbers;
        int *p5 = pUglyNumbers;
        while(nextIndex<index)
        {
            pUglyNumbers[nextIndex] = min(*p2*2,*p3*3,*p5*5);
            while(*p2*2 <= pUglyNumbers[nextIndex])
                p2++;
            while(*p3*3<=pUglyNumbers[nextIndex])
                p3++;
            while(*p5*5<=pUglyNumbers[nextIndex])
                p5++;
            nextIndex++;
        }
        return pUglyNumbers[index-1];

    }
    int min(int num1,int num2,int num3)
    {
        int tmp = num1 < num2?num1:num2;
        return tmp<num3?tmp:num3;
    }
};

刚拿到这个题的时候，才意识到，当初我看剑指offer真的是只记着代码，不记着解题思路。
我只是隐约记得当初的代码是只通过某几个数就能确认下一个位置的丑数，但是不记得是怎么做的。
后来我自己分析的时候，有那么几个坎我没绕过去。
第一： 既然计算丑数是要根据前面的丑数来计算，这个保存之前丑数的数组应该多大。这个纯粹是解题思路跑偏，要查找第几个索引就设置多大的内存呗。
第二： 既然只通过几个数字就能确定下一个丑数，那到底是哪几个？ 我自己列了一些丑数，发现根本没有规律，有的丑数可能是之前好几个步数之前。然后就
陷入了解题困境。 我还想过，某个丑数比如1，通过他可以直接生成的丑数是2,3,5 一旦这三个数字都生成了就可以把1拿掉。但是这个规律对解题没有帮助。

这个题的正确解题思路：
看看丑数的生成特点，都是基于前面的丑数乘以某个数生成的，每个丑数乘以2,3,5都可以向数轴的后方映射一系列的丑数点，生成的丑数又可以乘以2,3,5等
数继续向后映射新的丑数。我们要做的就是把这些映射点，由大到小按顺序读取。
那假设我们读取一个丑数后，怎么确定下一个丑数呢？ 下一个丑数 只可能 是之前某个丑数（包括刚生成的丑数）乘以2,3,5生成的。如果确定了这点，我们就不
用遍历之前所有的丑数只用这几个丑数就可以胃。
以乘以2生成为例，那这个丑数是所有之前丑数中能通过乘以2比当前丑数大的最大的点。我们只要每次生成丑数之后，把这样的点找出来就可以了。

bug:

while(*p2*2 <= pUglyNumbers[nextIndex])
                p2++;
while(*p3*3<=pUglyNumbers[nextIndex])
                p3++;
while(*p5*5<=pUglyNumbers[nextIndex])
                p5++;

这里的要用 <= 因为如果用 < 的话会出错，

一方面：因为我们希望通过*p2 *p3 *p5生成的下一个丑数比当前的丑数大 这个是我们的愿望。
另一方面： 如果用 < 符号的话，如果当前丑数是p2产生的，那么由于不小于当前丑数 p2 的指针就不会动，在下一次min比较的时候仍然是上一次的丑数值，
而p2 p3由于向前移动值变大，所以生成的丑数一直固定不变，这个显然是错的。
基于以上的一个疑问：上述bug分别是基于 理论和 实现两个角度剖析的，而且两者都是一致的要求<= 判别方式，这个是不是巧合呢？
其实不是巧合，而是有一种必然联系。
如果我们用<的话，就已经暗含了最终生成指针指向值是>=关系，也就是说有等于的情况。那生成一个和上次丑数相等的情况就联奇怪了。



















