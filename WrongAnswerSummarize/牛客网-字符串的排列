class Solution {
public:
    vector<string> Permutation(string str) {

        vector<string> result;
        if(str.empty())
            return result;
        func(str,0,result);
        sort(result.begin(),result.end());
        return result;

    }
    void func(string str,int begin,vector<string>& result)
    {
        if(str[begin] == '\0')
            result.push_back(str);
        for(int i=begin;i<str.length();i++)
        {
            if(i!= begin && str[i] == str[begin])
                continue;
            char temp = str[i];
            str[i] = str[begin];
            str[begin] = temp;
            func(str,begin +1,result);
            temp = str[i];
            str[i] = str[begin];
            str[begin] = temp;
        }
    }

};

这个题是属于用暴力方式解决的，但是如果方法不得当，即使想用暴力方法，也很难解决。
最开始的思路是 我想先排一个字符 a b c  再排两个字符  ab ac ba bc ca cb 依次类推。那中间产生的这些字符怎么保存这个是问题，我的思路是把这些
中间极点都存在vector里面，然后再拼接，扩展。比如vector里面本来有a,现在拿过来b和c 分别和a 拼接，生成ab 和 ac 。这里就有一个问题，怎么在
vector里面找到这个a。 很难找。
还有其他办法吗？
可以用嵌套循环来做，比如有长度为n的字符，可以用n重循环，但是n是一个变量，显然不能用这种方法。
其实这个到这应该就想到，用递归的方法。递归的方法特点就是虽然暴力，但是实现简单。
递归的思路就是分解问题
对长度为n的字符串，如果我们选定了第一个字符串，那么我们就排列剩下的n-1位就可以了。针对剩下n-1位数据依然是采用相同方法，直到只剩下最后一位数直接
返回。

到此我的思路是从长度为n的字符串遍历选取一个字符，然后把剩下的字符递归传递。






















