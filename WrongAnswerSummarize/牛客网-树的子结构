class Solution {
public:
    bool HasSubtree(TreeNode* pRoot1, TreeNode* pRoot2)
    {
        bool result = false;
        if(pRoot1 == nullptr || pRoot2 ==nullptr)
            return false;
        if(pRoot1->val == pRoot2->val)
            result =  HasSubtreeFunc(pRoot1,pRoot2);
        if(!result)
        {
           result = HasSubtree(pRoot1->left,pRoot2) || HasSubtree(pRoot1->right,pRoot2);
        }
        return result;


    }
    bool HasSubtreeFunc(TreeNode* pRoot1,TreeNode* pRoot2)
    {
        if(pRoot2 == nullptr)
            return true;
        if(pRoot1 == nullptr)
            return false;
        if(pRoot1->val != pRoot2->val)
            return false;
        return HasSubtreeFunc(pRoot1->left,pRoot2->left) &&HasSubtreeFunc(pRoot1->right,pRoot2->right);
    }
};
这题我知道是先搜索 在判断是不是二叉树，但是当时还是乱。当时想怎么递归遍历判断然后在遍历中插入另一个递归，当时理不清。
这种递归题想理清思路，我建议还是由上到下去分析。然后由下到上的思路去实现。